// Joshua Cury
// Menu Project assigned by Dr. T
// COSC-1437
// 05/01/2021

#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <time.h>
#include "Class.h"
#include "Input_Validation_Extended.h"

using namespace std;

// Function Prototypes
void populateMenu(vector<MenuItem> &entireMenu);
void showMenu(vector<MenuItem> &m);
void acceptOrder(vector<MenuItem> &m);
void printReceipt(vector<MenuItem> &m);
//int rand(int);

// Universal color choices
string color1 = "\x1b[43;1m";  // add color
string color2 = "\x1b[40;41m"; // add color
string color3 = "\x1b[32;1m";  // color for GOOD
string color4 = "\x1b[31;1m";  // color for BAD result
string color5 = "\x1b[35;1m";  // added color
string reset = "\x1b[0m";      // reset output

int main() 
{
  vector<MenuItem> wholeMenu; 
  populateMenu(wholeMenu); // put some default values in the menu
  showMenu(wholeMenu);     // print the current data of the menu on screen 
  acceptOrder(wholeMenu); 

  return 0; 
}

// function definitions
void populateMenu(vector<MenuItem> &entireMenu)
{
  // put some default values in our Menu
  const int numItems = 7;
  MenuItem Item1; 
  MenuItem Item2;
  MenuItem Item3; 
  MenuItem Item4;
  MenuItem Item5;
  MenuItem Item6;
  MenuItem Item7;    

  entireMenu.push_back(Item1); //add to the end of list the Item1
  entireMenu.push_back(Item2); //add to the end of list the Item2
  entireMenu.push_back(Item3); //add to the end of list the Item3
  entireMenu.push_back(Item4); //add to the end of list the Item4
  entireMenu.push_back(Item5); //add to the end of list the Item5
  entireMenu.push_back(Item6); //add to the end of list the Item6
  entireMenu.push_back(Item7); //add to the end of list the Item7

  vector<string> defaultMenuNames = {"Green Tea", "Burrito", "Curry", "Naan", "Ox Tail", "Salad", "Juice"}; 
  vector<char> defaultAddLetters = {'A', 'B', 'C', 'D', 'E', 'F', 'G'}; 
  vector<char> defaultRemoveLetters = {'a', 'b', 'c', 'd', 'e', 'f', 'g'}; 

  for(int i = 0; i < numItems; i++)
  {
    //add each item to the default list efficiently 
    entireMenu[i].name = defaultMenuNames[i];
    entireMenu[i].addLetter = defaultAddLetters[i]; 
    entireMenu[i].removeLetter = defaultRemoveLetters[i]; 
    entireMenu[i].itemCost = (3.00 + i); //set a random starter cost for each item
    entireMenu[i].count = 0; //initialze all counts to 0
    entireMenu[0].desc = "Hot/Cold";
    entireMenu[1].desc = "Beef/Bean";
    entireMenu[2].desc = "Red/Yellow";
    entireMenu[3].desc = "Reg/Garlic";
    entireMenu[4].desc = "delicious";
    entireMenu[5].desc = "House";
    entireMenu[6].desc = "Sugar Good";
  }

}

void showMenu(vector<MenuItem> &m)
{

  cout << fixed << setprecision(2);//set doubles to 2 decimal places
  cout << color1 << "\nA Menu created by Dr. T and used by Joshua Curry\n"
       << reset <<endl; 
  cout << color2 << "ADD  \tNAME \t COST \tREMOVE\tCOUNT\tDESC"<< reset << endl; 

  for(int i = 0; i < m.size(); i++)
  {
    cout << m[i].addLetter << ")" << setw(10) << m[i].getName() 
         << setw(5) << "$" << m[i].itemCost << setw(5) << "("
         << m[i].removeLetter << ")" << setw(7) << m[i].count << setw(13)
         << m[i].desc << endl;
  }
} // close showMenu

void acceptOrder(vector<MenuItem> &m)
{
  vector<MenuItem> receipt;
  string payment = "";
  char option = '\0';// the user-selected menu item
  double subtotal = 0.0;
  double tip = 0.0;
  double cash = 0.0;
  double change = 0.0;
  int num = 1;

  do
  {
    cout << "\nPlease choose an item. Capital letter to ADD item, Lower case letter to REMOVE an item (x to Exit): ";
    option = validateChar(option); // cin >> option

    for(int i=0; i < m.size(); i++)
    {
      if(option == m[i].addLetter)
      {
        cout << "\nMenu Item " << m[i].addLetter << " selected."; 
        m[i].count++; //increment the count by 1
        cout << "\033[2J\033[1;1H"; //clear screen 
        cout << "\n1 UP on " << m[i].getName() << endl;
        subtotal += m[i].itemCost; //increment the subtotal by the cost of the item 
        showMenu(m); //show the updated menu
        cout << color5 << "\nSubtotal: " << reset << color3
             << "$" << subtotal << reset << endl;  
      }
      else if(option == m[i].removeLetter)
      {
        cout << "\nRemove Item " << m[i].removeLetter << " selected."; 
        if(m[i].count > 0) //subtract if and only if the count is > 0
        {
          m[i].count--; //decrement the count by 1
          cout << "\033[2J\033[1;1H"; //clear screen 
          cout << "\n1 DOWN on " << m[i].getName() << endl;
          subtotal -= m[i].itemCost; //decrement the subtotal by the cost of the item
          showMenu(m); //show the updated menu
          cout << color5 << "\nSubtotal: " << reset << color3
               << "$" << subtotal << reset << endl;  
        }
        else //the the user why you blocked item removal 
        {
            cout << "\nItem count must be > 0 to remove: " << m[i].getName() << endl;
        }
      }
      else if(
                option != m[i].addLetter && 
                option != m[i].removeLetter &&
                option != 'x' &&
                option != 'X' 
            ) //test for all of my valid inputs
            {
              if(i == 0)
              {
                cout << "\nInvalid input (" << option << "). Please try again." << endl; 
              }  
            }
    }
  }while(option != 'x' && option != 'X');

  cout << "\nThank you for placing your order." << endl;
  cout << color3 << "\nWould you like to add a tip?\n" << reset;

  //handle the tip process here

  double tax = (subtotal*0.0825);
  double totalCost = (subtotal*(1+(tip/100))+tax);

  while(option != 'y' && option != 'Y' && option != 'n' && option != 'N')
  {
    cout << "\nGood service (20%)";
    cout << "\nGreat service (22%)";
    cout << "\nPerfect service (25%)\n";
    cout << "\nAdd tip (" << color3 << "Y "
         << reset << "/ " << color4 << "N" 
         << reset << "): ";
    option = validateChar(option);

    if(option == 'y' || option == 'Y')
    {
      cout << color3 << "\nExcellent! " << reset
           <<"Enter Percent you want to add: ";
           tip = validateDouble(tip);

      cout << "\nYour total due is " 
           << color3 << totalCost
           << reset << " dollars." << endl;
    }
    
    else if(option == 'n' || option == 'N')
    {
      cout << color4 << "\nI hope you learn respect for servers.\n"
           << reset;
      cout << "\nYour total due is "
           << color4 << totalCost
           << reset << " dollars." << endl;
    }
    
    else
    {
      cout << "\nPlease enter 'Y' for yes, or 'N' for no: ";
    }
  } // End (y / n) while loop
 
  //handle reciept generation here
  
  cout << "\nWill that be cash or credit?\n";
  cout << "\nType 'cash' or 'credit' : ";
  
  while(payment != "CASH" && payment != "CREDIT")
  {
    payment = validateString(payment);
    transform(payment.begin(), payment.end(), payment.begin(), ::toupper);

    if(payment == "CASH")
    {
      cout << "\nEnter cash given: ";
      cash = validateDouble(cash);
      cout << endl;

      while(cash < totalCost)
      {
        cout << color4 << "You didn't give enough cash."
             << "Try again: " << reset;
        cash = validateDouble(cash);
      }

      change = cash - (subtotal*(1+(tip/100))+tax);

      cout << "Your change is " << color3 << "$" << change << reset << endl;

    } // closes if payment == CASH
    else if(payment == "CREDIT")
    {
      do
      {
        for (int i = 0; i < num; i++)
        {
          if(rand()%2 == 1)
          {
            cout << color3 << "\nApproved" << reset << endl;
          }
          else
          {
            cout << color2 << "Denied."
                 << reset << "Try again.\n";
            cout << "Type credit: ";
            payment = validateString(payment);
          }
        } // end for loop
        
      }while(num == false);
     
    } // closes else if payment == CREDIT
    else
    {
      cout << "\nPlease type 'cash' or 'credit': ";
    }
  } // end payment While loop

  printReceipt(receipt);
  cout << "\nTotal " << totalCost << endl;

}

/*
7. Then generate receipt on screen
void printReceipt(vector<MenuItem> &m, double subtotal);
// pass the subtoal and/or another needed variables in this regard
*/

void printReceipt(vector<MenuItem> &m)
{
  char option = '\0';
/***************************************************************************************

  vector<MenuItem> receipt;
  string payment = "";
  //char option = '\0';// the user-selected menu item
  // subtotal += m.getItemCost();
  double tip = 0.0;
  double cash = 0.0;
  double change = 0.0;
  int num = 1;


cout << "\nThank you for placing your order." << endl;
  cout << color3 << "\nWould you like to add a tip?\n" << reset;

  //handle the tip process here
  double tax = (subtotal*0.0825);
  double totalCost = (subtotal*(1+(tip/100))+tax);

  while(option != 'y' && option != 'Y' && option != 'n' && option != 'N')
  {
    cout << "\nGood service (20%)";
    cout << "\nGreat service (22%)";
    cout << "\nPerfect service (25%)\n";
    cout << "\nAdd tip (" << color3 << "Y "
         << reset << "/ " << color4 << "N" 
         << reset << "): ";
    option = validateChar(option);

    if(option == 'y' || option == 'Y')
    {
      cout << color3 << "\nExcellent! " << reset
           <<"Enter Percent you want to add: ";
           tip = validateDouble(tip);

      cout << "\nYour total due is " 
           << color3 << totalCost
           << reset << " dollars." << endl;
    }
    
    else if(option == 'n' || option == 'N')
    {
      cout << color4 << "\nI hope you learn respect for servers.\n"
           << reset;
      cout << "\nYour total due is "
           << color4 << totalCost
           << reset << " dollars." << endl;
    }
    
    else
    {
      cout << "\nPlease enter 'Y' for yes, or 'N' for no: ";
    }
  } // End (y / n) while loop
 
  //handle reciept generation here
  
  cout << "\nWill that be cash or credit?\n";
  cout << "\nType 'cash' or 'credit' : ";
  
  while(payment != "CASH" && payment != "CREDIT")
  {
    payment = validateString(payment);
    transform(payment.begin(), payment.end(), payment.begin(), ::toupper);

    if(payment == "CASH")
    {
      cout << "\nEnter cash given: ";
      cash = validateDouble(cash);
      cout << endl;

      while(cash < totalCost)
      {
        cout << color4 << "You didn't give enough cash."
             << "Try again: " << reset;
        cash = validateDouble(cash);
      }

      change = cash - (subtotal*(1+(tip/100))+tax);

      cout << "Your change is " << color3 << "$" << change << reset << endl;

    } // closes if payment == CASH
    else if(payment == "CREDIT")
    {
      do
      {
        for (int i = 0; i < num; i++)
        {
          if(rand()%2 == 1)
          {
            cout << color3 << "\nApproved" << reset << endl;
          }
          else
          {
            cout << color2 << "Denied."
                 << reset << "Try again.\n";
            cout << "Type credit: ";
            payment = validateString(payment);
          }
        } // end for loop
        
      }while(num == false);
     
    } // closes else if payment == CREDIT
    else
    {
      cout << "\nPlease type 'cash' or 'credit': ";
    }
  } // end payment While loop
***************************************************************************************/
  cout << "\nWould you like a receipt? (Y / N): ";

  while (option != 'y' && option != 'Y' && option != 'n' && option != 'N')
  {
    option = validateChar(option);

    if(option == 'Y' || option == 'y')
    {
       for(int i = 0; i < m.size(); i++)
        {
          cout << m[i].name[i] << endl
               << m[i].getItemCost() << endl
               << m[i].getCount() << endl;
        }
    }
    else if(option == 'N' || option == 'n')
    {
      cout << "Thank you, have a nice day\n";
    }
  }
}

/*
int rand(int num)
  {
    srand((unsigned) time(0));
    num = rand()%2 + 1;
    return num;
  }
  */
